from Crypto.Util.number import *
import gmpy2

n = 24456513668907101359271796518022987404822072050667823923658615869713366383971188719969649435049035576669472727127263581903194099017975695864947929128367925596885753443249213201464273639499012909424736149608651744371555837721791748016889531637876303898022555235081004895411069645304985372521003721010862125442095042882100526577024974456438653686633405126923109918116756381929718438800103893677616376097141956262119327549521930637736951686117614349172207432863248304206515910202829219635801301165048124304406561437145821967710958494879876995451567574220240353599402105475654480414974342875582148522218019743166820077511
e = 65537
c = 18597341961729093099197297749831937867867316311655201999082918827905805371478429928112783157010654738161403312986940377995349388331953112844242407426040120302839420903486499187443737383169223520050969011318937950864196985991944523897440559547618789750180738003138383081085865616976666352985134179471231798760776607911573149993314296253654585181164097972479570867395976653829684069633563438561147707530130563531572708010593487686521808574459865586551335422619675302973576174518308347087901889923892503468385483111040271271572302540992212613766789315482719811321158322571666641755809592299352653626100918299699982602448

# p =: x * 2**512 + y
# q =: y * 2**512 + x
# n = x*y * 2**1024 + (x**2 + y**2) * 2**512 + x*y
# xy =: A * 2**512 + B => B == n % 2**512,  A ~~ n >> 1536

A_Max = n >> 1536
B = n % 2**512

i = -1
while (True):
    i += 1
    A = A_Max - i
    xy = (A << 512) + B
    x2_plus_y2 = (n - (xy * 2**1024 + xy)) >> 512
    test = gmpy2.iroot(x2_plus_y2 + 2 * xy, 2)
    if not test[1]:
        continue
    x_plus_y = test[0]
    D = x_plus_y ** 2 - 4 * xy
    if D < 0:
        continue
    test = gmpy2.iroot(D, 2)
    if not test[1]:
        continue
    sqrt_D = test[0]
    x = (x_plus_y + sqrt_D)//2
    y = (x_plus_y - sqrt_D)//2
    p = x * 2**512 + y
    if n % p == 0:
        q = n // p
        break

d = inverse(e, (p-1)*(q-1))
print(long_to_bytes(pow(c, d, n)).decode())
